//===-- EVMISelDAGToDAG.cpp - A dag to dag inst selector for EVM ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the EVM target.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/EVMMCTargetDesc.h"
#include "EVM.h"
#include "EVMTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "evm-isel"

// EVM-specific code to select EVM machine instructions for
// SelectionDAG operations.
namespace {
class EVMDAGToDAGISel final : public SelectionDAGISel {
  const EVMSubtarget *Subtarget;

public:
  explicit EVMDAGToDAGISel(EVMTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {
      }

  StringRef getPassName() const override {
    return "EVM DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<EVMSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *Node) override;

  bool SelectLOAD(SDNode *Node);

  // custom selecting
  bool SelectSETCC(SDNode *Node);
  bool SelectBlockAddress(SDNode *Node);
  bool SelectSIGNEXTEND(SDNode *Node);
  bool SelectCall(SDNode *Node);

// Include the pieces autogenerated from the target description.
#include "EVMGenDAGISel.inc"
};
}

bool EVMDAGToDAGISel::SelectLOAD(SDNode *Node) {
  const LoadSDNode *LD = cast<LoadSDNode>(Node);

  switch (LD->getExtensionType()) {
    case ISD::SEXTLOAD: {
      // MLOAD -> SIGNEXTEND
      SDValue Src = LD->getBasePtr();
      uint64_t bytesToShift = 32 - (LD->getMemoryVT().getSizeInBits() / 8);
      SDValue sval = CurDAG->getConstant(bytesToShift, SDLoc(Node), MVT::i256);
      SDValue shift = SDValue(CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256, sval), 0);
      SDValue mload = SDValue(CurDAG->getMachineNode(EVM::MLOAD_r,
                              SDLoc(Node), MVT::i256, Src), 0);
      MachineSDNode * signextend = CurDAG->getMachineNode(EVM::SIGNEXTEND_r,
                  SDLoc(Node), MVT::i256, mload, shift);
      ReplaceNode(Node, signextend);
      return true;
    }
    case ISD::ZEXTLOAD: {
      // Load and then zsignextend.
      //  MLOAD > SLL > SRL
      SDValue Src = LD->getBasePtr();
      uint64_t bytesToFill = 256 - LD->getMemoryVT().getSizeInBits();
      SDValue multiplier =CurDAG->getConstant(1 << bytesToFill, SDLoc(Node), MVT::i256);
      SDValue push_mul =
          SDValue(CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256,
                                         multiplier),
                  0);
      SDValue mload = SDValue(CurDAG->getMachineNode(EVM::MLOAD_r,
                              SDLoc(Node), MVT::i256, Src), 0);
      SDValue mul = SDValue(CurDAG->getMachineNode(EVM::MUL_r, SDLoc(Node),
                                                   MVT::i256, mload, push_mul), 0);

      MachineSDNode * div = CurDAG->getMachineNode(EVM::DIV_r, SDLoc(Node),
                                                   MVT::i256, MVT::Other, mul, push_mul);
      ReplaceNode(Node, div);
      return true;
    }
    case ISD::NON_EXTLOAD:
    case ISD::EXTLOAD: {
      //llvm_unreachable("unimplemented");
      return false;
    }
  }
  return false;
}

bool EVMDAGToDAGISel::SelectBlockAddress(SDNode *Node) {
  BlockAddressSDNode* ba = cast<BlockAddressSDNode>(Node);

  SDValue tba = CurDAG->getTargetBlockAddress(ba->getBlockAddress(), MVT::i256);
  MachineSDNode *push =
      CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256, tba);

  ReplaceNode(Node, push);
  return true;
}

bool EVMDAGToDAGISel::SelectSIGNEXTEND(SDNode *Node) {
  unsigned opcode = Node->getOpcode();
  assert(opcode == EVMISD::SIGNEXTEND);

  const SDValue reg = Node->getOperand(0);
  const SDValue shiftVal = Node->getOperand(1);
  ConstantSDNode *shiftConstant = dyn_cast<ConstantSDNode>(shiftVal);
  uint64_t shiftuint = shiftConstant->getZExtValue();

  SDValue sval = CurDAG->getConstant(shiftuint, SDLoc(Node), MVT::i256);
  const SDValue shift = SDValue(
      CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256, sval), 0);
  MachineSDNode *signextend = CurDAG->getMachineNode(
      EVM::SIGNEXTEND_r, SDLoc(Node), MVT::i256, reg, shift);

  ReplaceNode(Node, signextend);
  return true;
}

bool EVMDAGToDAGISel::SelectCall(SDNode *Node) {
  unsigned opcode = Node->getOpcode();
  assert (opcode == EVMISD::CALL || opcode == EVMISD::CALLVOID);
  bool isVoid = opcode == EVMISD::CALLVOID;
  unsigned mopcode = isVoid ? EVM::pJUMPSUBVOID_r : EVM::pJUMPSUB_r;

  const SDValue &chain = Node->getOperand(0);
  const SDValue &targetWrapper = Node->getOperand(1);
  assert(targetWrapper.getOpcode() == EVMISD::WRAPPER);

  // get the jump target.
  const SDValue &target = targetWrapper.getOperand(0);
  assert(target.getOpcode() == ISD::TargetGlobalAddress);
  
  // construct return 
  std::vector<SDValue> opsVec;


  for (unsigned i = 2; i < Node->getNumOperands(); ++i) {
    opsVec.push_back(Node->getOperand(i));
  }

  // we put the target at the back of the operands, it becomes:
  // pJUMPSUB arg1, arg2, arg3, ..., targetAddr
  // stack status is:
  // (top) arg1, arg2, arg3, ..., targetAddr
  // we need to have return address, which is best to be fixed in position:
  // 1. PUSH retAddr (PC + offset)
  // 2. swap retAddr and targetAddr
  
  MachineSDNode *push =
      CurDAG->getMachineNode(EVM::PUSH32_r, SDLoc(Node), MVT::i256, target);
  SDValue pushVal = SDValue(push, 0);
  opsVec.push_back(pushVal);

  opsVec.push_back(chain);


  ArrayRef<SDValue> ops(opsVec);

  MachineSDNode *call =
      CurDAG->getMachineNode(mopcode, SDLoc(Node), Node->getVTList(), ops);

  ReplaceNode(Node, call);
  return true;
}

bool EVMDAGToDAGISel::SelectSETCC(SDNode *Node) {
  ISD::CondCode cc = cast<CondCodeSDNode>(Node->getOperand(2))->get();


  unsigned firstOpcode;

  switch (cc) {
    case ISD::SETNE:
      // %temp = EQ_r lhs, rhs
      // %rv = NOT %temp
      firstOpcode = EVM::EQ_r;
      break;
    case ISD::SETUGE:
      // %temp = LT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::LT_r;
      break;
    case ISD::SETGE:
      // %temp = SLT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::SLT_r;
      break;
    case ISD::SETULE:
      // %temp = GT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::GT_r;
      break;
    case ISD::SETLE:
      // %temp = SGT_r lhs, rhs
      // %rv = ISZERO %temp
      firstOpcode = EVM::SGT_r;
      break;
    default:
      // those will be handled by tablegen
      return false;
  }

  const SDValue &LHS = Node->getOperand(0);
  const SDValue &RHS = Node->getOperand(1);

  SDValue eq = SDValue(CurDAG->getMachineNode(firstOpcode, SDLoc(Node),
                                               MVT::i256, LHS, RHS), 0);
  MachineSDNode * ne = CurDAG->getMachineNode(EVM::ISZERO_r, SDLoc(Node),
                                              MVT::i256, eq);
  ReplaceNode(Node, ne);
  return true;
}

void EVMDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << '\n');
    return;
  }

  switch (Opcode) {
    case ISD::LOAD: {
      if (SelectLOAD(Node)) return;
      break;
    }
    case ISD::SETCC:
      if (SelectSETCC(Node)) return;
      break;
    case ISD::BlockAddress:
      if (SelectBlockAddress(Node)) return;
      break;
    case EVMISD::CALL:
    case EVMISD::CALLVOID:
      if (SelectCall(Node)) return;
      break;
    case EVMISD::SIGNEXTEND:
      if (SelectSIGNEXTEND(Node)) return;
      break;
  }

  SelectCode(Node);
}

// This pass converts a legalized DAG into a EVM-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createEVMISelDag(EVMTargetMachine &TM) {
  return new EVMDAGToDAGISel(TM);
}
